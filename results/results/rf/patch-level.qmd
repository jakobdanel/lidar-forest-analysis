
### Train with patch level information

In this phase of our study, we examined the impact of patch-level information on the model. The model training incorporated Z-Values, distance to the 100 nearest neighbors, density of trees within a patch, as well as statistics related to the canopy height, including mean, variance, and median.

```{r}
#| code-fold: true
#| warning: false
#| results: hide
chms <- lfa::lfa_visit_all_areas(lfa::lfa_chm)
patches <- lfa::lfa_get_all_areas()
patches$chm_mean = NA
patches$chm_var = NA
patches$chm_median = NA
for (area_key in names(chms)) {
  area <- chms[area_key]
  area[[area_key]] |> as.vector() -> vec
  patches[patches$area == area_key, "chm_mean"] <-
    mean(vec, na.rm = T)
  patches[patches$area == area_key, "chm_var"] <-
    var(vec, na.rm = T)
  patches[patches$area == area_key, "chm_median"] <-
    median(vec, na.rm = T)
  
}
```

```{r}
#| code-fold: true
#| warning: false
#| results: hide
neighbors <- lfa::lfa_get_neighbor_paths() |> lfa::lfa_combine_sf_obj(lfa::lfa_get_all_areas())
```


```{r}
#| code-fold: true
#| warning: false
#| results: hide
detections <- lfa::lfa_get_detections()
density <- lfa::lfa_calculate_patch_density(detections = detections)
colnames(density) <- c("id","specie","area","geometry","area_size","detections","density")
detections <- dplyr::left_join(detections,density |> as.data.frame(),by=c("area","specie"))
detections <- dplyr::left_join(detections,patches, by = c("area","specie"))

detections <- sf::st_join(detections, neighbors, join = sf::st_within)

detections$treeID.x = NULL
names(detections)[names(detections) == 'treeID.y'] <- 'treeID'

detections$Z.x = NULL
names(detections)[names(detections) == 'Z.y'] <- 'Z'

detections$area.x = NULL
names(detections)[names(detections) == 'area.y'] <- 'area'

detections$specie.x = NULL
names(detections)[names(detections) == 'specie.y'] <- 'specie'

excluded_cols = c("treeID","geom","area","specie","id","geometry","area_size","detections","geometry")
```

```{r, cache=TRUE}
#| code-fold: true
#| warning: false
#| results: hide
data <- lfa::lfa_random_forest(tree_data = detections, excluded_input_columns = excluded_cols,response_variable = "specie")
```

```{r}
#| code-fold: true
#| warning: false
model.rf_patch <- data
save(model.rf_patch, file = "./models/patch.rData")
```

```{r}
#| code-fold: true
#| warning: false
#| label: fig-cm-patch
#| fig-cap: Confusion Matrix of randomForest on returns per Tree.
cm <- data$confusion_matrix
lfa::lfa_plot_confusion_matrix(cm)
```
The model yields favorable overall results, with an accuracy of 0.63 and a Kappa value of 0.49. Notably, predictions appear to be predominantly influenced by patch-level information, resulting in largely homogeneous predictions within most patches.

For the "Beech" and "Oak" classes, the classifier performs moderately well, exhibiting moderate precision and recall values. These values are within the same domain, with an equal balance between recall and precision for both classes.

In the case of the "Pine" class, high precision is accompanied by lower recall, indicating a conservative prediction approach. However, the classifier successfully captures a substantial portion of actual "Pine" instances. Noteworthy is the presence of outliers where "Pine" is falsely predicted as "Oak" (see @fig-cm-patch). These false predictions are concentrated in the Greffen patch, which contains a total of 513 detections. Notably, all significant Pine patches yield accurate predictions.

The "Spruce" class exhibits a good balance between precision and recall, with slightly better recall values. The deciduous vs. conifers comparison is notably successful, with conifers predicted mostly as true positives and false predictions for deciduous tree species predominantly leaning towards predicting deciduous trees.

```{r}
#| code-fold: true
#| warning: false
#| label: fig-pr-patch
#| fig-cap: Class wise precision and recall for randomForest-Classification with LiDAR returns per tree. 
data$confusion_matrix |> lfa::lfa_calculate_rf_metrics() |> lfa::lfa_visualize_rf_metrics()
```

