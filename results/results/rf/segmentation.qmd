
### Enrich Neighbors with segmentation data

This model employs the same parameters as the preceding one, while incorporating additional features derived from the segmentation of each tree in the point cloud. The expanded feature set includes density of returns per tree, mean and variance of Z values of return points, mean and variance of intensity of LiDAR returns, number of LiDAR returns per tree, and the area in square meters of each tree. The aim is to compare the results obtained with this augmented feature set against those based solely on tree detection characteristics.

```{r}
#| echo: false
knitr::opts_knit$set(root.dir = "/home/jakob/gi-master/project-courses/lidar-forest-analysis/src/")
```


```{r}
#| code-fold: true
#| warning: false
#| results: hide
data <- sf::st_read("./data/tree_properties.gpkg")
detections <- lfa::lfa_get_detections()
neighbors <- lfa::lfa_get_neighbor_paths() |> lfa::lfa_combine_sf_obj(lfa::lfa_get_all_areas())
```
```{r}
#| code-fold: true
#| warning: false
#| results: hide
combined <- sf::st_join(data,detections,join = sf::st_within)

combined$Z.x = NULL
names(combined)[names(combined) == 'Z.y'] <- 'Z'

combined$treeID.segmentation <- NULL

combined[["density"]][is.na(combined[["density"]])] <- -1
combined[["Z.mean"]][is.na(combined[["Z.mean"]])] <- -1
combined[["Z.var"]][is.na(combined[["Z.var"]])] <- -1
combined[["Intensity.mean"]][is.na(combined[["Intensity.mean"]])] <- -1
combined[["Intensity.var"]][is.na(combined[["Intensity.var"]])] <- -1
combined[["number_of_returns"]][is.na(combined[["number_of_returns"]])] <- -1
combined[["tree_area"]][is.na(combined[["tree_area"]])] <- -1

neighbors$treeID = NULL
neighbors$Z = NULL
neighbors$area = NULL
neighbors$specie = NULL

combined = sf::st_join(combined, neighbors, sf::st_within)
excluded_cols <- c("Z.x", "treeID.detection","treeID.segmentation","name_las_file","treeID","area","specie","geom")

```

```{r, cache=TRUE}
#| code-fold: true
#| warning: false
#| results: hide
data <- lfa::lfa_random_forest(tree_data = combined, excluded_input_columns = excluded_cols,response_variable = "specie")
```

```{r}
#| code-fold: true
#| warning: false
model.rf_segmentation_detection_params <- data
save(model.rf_segmentation_detection_params, file = "./models/segmentation_detection_params.rData")
```


```{r}
#| code-fold: true
#| warning: false
#| fig-cap: Confusion Matrix of randomForest with all parameters derived from tree level.
#| label: fig-cm-tree-level
cm <- data$confusion_matrix
lfa::lfa_plot_confusion_matrix(cm)
```

The classifier exhibits suboptimal performance for the "Beech" and "Oak" classes, with low precision and recall values, indicative of challenges in accurately classifying instances for these categories. In contrast, the "Pine" class demonstrates higher precision and recall, suggesting improved performance in capturing true instances while minimizing false positives. The "Spruce" class displays moderate precision and high recall, indicating relatively better performance in capturing true instances with fewer false positives.

Notably, the overall accuracy (0.44) and Kappa (0.23) have significantly improved compared to the previous model (Accuracy = 0.35, Kappa = 0.14). The model demonstrates effectiveness for conifers but shows limitations for deciduous trees, as depicted in the confusion matrix at the tree-level (@fig-cm-tree-level). Specifically, "Oak" and "Beech" ground truth predictions are distributed among all classes, while "Pine" exhibits false negatives, especially for the "Spruce" class.

Additionally, this model achieves a more balanced distribution between Precision and Recall differences across classes, as illustrated in the Precision-Recall curve at the tree-level (@fig-pr-tree-level).

```{r}
#| code-fold: true
#| warning: false
#| fig-cap: Precsion and Recall of randomForest with all parameters derived from tree level.
#| label: fig-pr-tree-level
data$confusion_matrix |> lfa::lfa_calculate_rf_metrics() |> lfa::lfa_visualize_rf_metrics()
```

