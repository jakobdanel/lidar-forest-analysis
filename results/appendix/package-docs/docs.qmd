### `lfa_capitalize_first_char`

Capitalize First Character of a String


#### Arguments

Argument      |Description
------------- |----------------
`input_string`     |     A single-character string to be processed.


#### Concept

String Manipulation


#### Description

This function takes a string as input and returns the same string with the
 first character capitalized. If the first character is already capitalized,
 the function does nothing. If the first character is not from the alphabet,
 an error is thrown.


#### Details

This function performs the following steps:
  

*  Checks if the input is a single-character string. 

*  Verifies if the first character is from the alphabet (A-Z or a-z). 

*  If the first character is not already capitalized, it capitalizes it. 

*  Returns the modified string.


#### Keyword

alphabet


#### Note

This function is case-sensitive and assumes ASCII characters.


#### References

None


#### Seealso

This function is related to the basic string manipulation functions in base R.


#### Value

A modified string with the first character capitalized if it is
 not already. If the first character is already capitalized, the original
 string is returned.


#### Examples

```{r}
#| eval: false
# Capitalize the first character of a string
capitalize_first_char("hello") # Returns "Hello"
capitalize_first_char("World") # Returns "World"

# Error example (non-alphabetic first character)
capitalize_first_char("123abc") # Throws an error
```


#### Usage

```{r}
#| eval: false
lfa_capitalize_first_char(input_string)
```



### `lfa_check_flag`

Check if a flag is set, indicating the completion of a specific process.


#### Arguments

Argument      |Description
------------- |----------------
`flag_name`     |     A character string specifying the name of the flag file. It should be a descriptive and unique identifier for the process being checked.


#### Description

This function checks for the existence of a hidden flag file at a specified location within the working directory. If the flag file is found, a message is printed, and the function returns `TRUE` to indicate that the associated processing step has already been completed. If the flag file is not found, the function returns `FALSE` , indicating that further processing can proceed.


#### Value

A logical value indicating whether the flag is set ( `TRUE` ) or not ( `FALSE` ).


#### Examples

```{r}
#| eval: false
# Check if the flag for a process named "data_processing" is set
lfa_check_flag("data_processing")
```


#### Usage

```{r}
#| eval: false
lfa_check_flag(flag_name)
```



### `lfa_combine_sf_obj`

Combine Spatial Feature Objects from Multiple GeoPackage Files


#### Arguments

Argument      |Description
------------- |----------------
`paths`     |     A character vector containing file paths to GeoPackage files with neighbor information.
`area_infos`     |     A data frame or list containing information about the corresponding detection areas, including "area" and "specie" columns.


#### Description

This function reads spatial feature objects (sf) from multiple GeoPackage files and combines them into a single sf object.
 Each GeoPackage file is assumed to contain neighbor information for a specific detection area, and the resulting sf object
 includes additional columns indicating the corresponding area and species information.


#### Value

A combined sf object with additional columns for area and specie information.


#### Examples

```{r}
#| eval: false
# Assuming paths and area_infos are defined
combined_sf <- lfa_combine_sf_obj(paths, area_infos)

# Print the combined sf object
print(combined_sf)
```


#### Usage

```{r}
#| eval: false
lfa_combine_sf_obj(paths, area_infos)
```



### `lfa_count_returns_all_areas`

Count tree returns for all species and areas, returning a consolidated data frame.


#### Description

This function iterates through all species and areas obtained from the function
 [`lfa_get_all_areas`](#lfagetallareas) . For each combination of species and area, it reads
 the corresponding area as a catalog, counts the returns per tree using
 [`lfa_count_returns_per_tree`](#lfacountreturnspertree) , and consolidates the results into a data frame.
 The resulting data frame includes columns for the species, area, and return counts per tree.


#### Keyword

counting


#### Seealso

[`lfa_get_all_areas`](#lfagetallareas) , [`lfa_read_area_as_catalog`](#lfareadareaascatalog) ,
 [`lfa_count_returns_per_tree`](#lfacountreturnspertree)


#### Value

A data frame with columns for species, area, and return counts per tree.


#### Examples

```{r}
#| eval: false
# Count tree returns for all species and areas
returns_counts <- lfa_count_returns_all_areas()
```


#### Usage

```{r}
#| eval: false
lfa_count_returns_all_areas()
```



### `lfa_count_returns_per_tree`

Count returns per tree for a given lidR catalog.


#### Arguments

Argument      |Description
------------- |----------------
`ctg`     |     A lidR catalog object containing LAS files to be processed.


#### Description

This function takes a lidR catalog as input and counts the returns per tree.
 It uses the lidR package to read LAS files from the catalog and performs the counting
 operation on each tree. The result is a data frame containing the counts of returns
 for each unique tree ID within the lidR catalog.


#### Keyword

counting


#### Seealso

[`lidR::readLAS`](#lidr::readlas) , [`lidR::is.empty`](#lidr::is.empty) ,
 [`base::table`](#base::table) , [`dplyr::bind_rows`](#dplyr::bindrows)


#### Value

A data frame with columns for tree ID and the corresponding count of returns.


#### Examples

```{r}
#| eval: false
# Count returns per tree for a lidR catalog
ctg <- lfa_read_area_as_catalog("SpeciesA", "Area1")
returns_counts_per_tree <- lfa_count_returns_per_tree(ctg)
```


#### Usage

```{r}
#| eval: false
lfa_count_returns_per_tree(ctg)
```



### `lfa_create_boxplot`

Create a box plot from a data frame


#### Arguments

Argument      |Description
------------- |----------------
`data`     |     A data frame containing the data.
`value_column`     |     The name of the column containing the values for the box plot.
`category_column1`     |     The name of the column containing the first categorical variable.
`category_column2`     |     The name of the column containing the second categorical variable.
`title`     |     An optional title for the plot. If not provided, a default title is generated based on the data frame name.


#### Description

This function generates a box plot using ggplot2 based on the specified data frame and columns.


#### Details

The function creates a box plot where the x-axis is based on the second categorical variable,
 the y-axis is based on the specified value column, and the box plots are colored based on the first
 categorical variable. The grouping of box plots is done based on the unique values in the second categorical variable.


#### Value

A ggplot object representing the box plot.


#### Examples

```{r}
#| eval: false
# Assuming you have a data frame 'your_data' with columns 'value', 'category1', and 'category2'
create_boxplot(your_data, "value", "category1", "category2")
```


#### Usage

```{r}
#| eval: false
lfa_create_boxplot(
  data,
  value_column,
  category_column1,
  category_column2,
  title = NULL
)
```



### `lfa_create_density_plots`

Create density plots for groups in a data frame


#### Arguments

Argument      |Description
------------- |----------------
`data`     |     A data frame containing the data.
`value_column`     |     The name of the column containing the values for the density plot.
`category_column1`     |     The name of the column containing the categorical variable for grouping.
`category_column2`     |     The name of the column containing the categorical variable for arranging plots.
`title`     |     An optional title for the plot. If not provided, a default title is generated based on the data frame name.
`xlims`     |     Optional limits for the x-axis. Should be a numeric vector with two elements (lower and upper bounds).
`ylims`     |     Optional limits for the y-axis. Should be a numeric vector with two elements (lower and upper bounds).


#### Description

This function generates density plots using ggplot2 based on the specified data frame and columns.


#### Details

The function creates density plots where the x-axis is based on the specified value column,
 and the density plots are colored based on the first categorical variable. The arrangement of plots
 is done based on the unique values in the second categorical variable. The plots are arranged in a 2x2 grid.


#### Value

A ggplot object representing the density plots arranged in a 2x2 grid.


#### Examples

```{r}
#| eval: false
# Assuming you have a data frame 'your_data' with columns 'value', 'category1', and 'category2'
create_density_plots(your_data, "value", "category1", "category2", title = "Density Plots", xlims = c(0, 10), ylims = c(0, 0.5))
```


#### Usage

```{r}
#| eval: false
lfa_create_density_plots(
  data,
  value_column,
  category_column1,
  category_column2,
  title = NULL,
  xlims = NULL,
  ylims = NULL
)
```



### `lfa_create_stacked_distributions_plot`

Create a stacked distribution plot for tree detections, visualizing the distribution
 of a specified variable on the x-axis, differentiated by another variable.


#### Arguments

Argument      |Description
------------- |----------------
`trees`     |     A data frame containing tree detection data.
`x_value`     |     A character string specifying the column name used for finding the values on the x-axis of the histogram.
`fill_value`     |     A character string specifying the column name by which the data are differentiated in the plot.
`bin`     |     An integer specifying the number of bins for the histogram. Default is 100.
`ylab`     |     A character string specifying the y-axis label. Default is "Amount trees."
`xlim`     |     A numeric vector of length 2 specifying the x-axis limits. Default is c(0, 100).
`ylim`     |     A numeric vector of length 2 specifying the y-axis limits. Default is c(0, 1000).
`title`     |     The title of the plot.


#### Description

This function generates a stacked distribution plot using the ggplot2 package,
 providing a visual representation of the distribution of a specified variable
 ( `x_value` ) on the x-axis, with differentiation based on another variable
 ( `fill_value` ). The data for the plot are derived from the provided `trees` 
 data frame.


#### Keyword

data


#### Seealso

[`ggplot2::geom_histogram`](#ggplot2::geomhistogram) , [`ggplot2::facet_wrap`](#ggplot2::facetwrap) ,
 [`ggplot2::ylab`](#ggplot2::ylab) , [`ggplot2::scale_fill_brewer`](#ggplot2::scalefillbrewer) ,
 [`ggplot2::coord_cartesian`](#ggplot2::coordcartesian)


#### Value

A ggplot object representing the stacked distribution plot.


#### Examples

```{r}
#| eval: false
# Create a stacked distribution plot for variable "Z," differentiated by "area"
trees <- lfa_get_detections()
lfa_create_stacked_distributions_plot(trees, "Z", "area")
```


#### Usage

```{r}
#| eval: false
lfa_create_stacked_distributions_plot(
  trees,
  x_value,
  fill_value,
  bin = 100,
  ylab = "Amount trees",
  xlim = c(0, 100),
  ylim = c(0, 1000),
  title =
    "Histograms of height distributions between species 'beech', 'oak', 'pine' and 'spruce' divided by the different areas of Interest"
)
```



### `lfa_create_stacked_histogram`

Create a stacked histogram for tree detections, summing up the values for each species.


#### Arguments

Argument      |Description
------------- |----------------
`trees`     |     A data frame containing tree detection data.
`x_value`     |     A character string specifying the column name used for finding the values on the x-axis of the histogram.
`fill_value`     |     A character string specifying the column name by which the data are differentiated in the plot.
`bin`     |     An integer specifying the number of bins for the histogram. Default is 30.
`ylab`     |     A character string specifying the y-axis label. Default is "Frequency."
`xlim`     |     A numeric vector of length 2 specifying the x-axis limits. Default is c(0, 100).
`ylim`     |     A numeric vector of length 2 specifying the y-axis limits. Default is NULL.


#### Description

This function generates a stacked histogram using the ggplot2 package,
 summing up the values for each species and visualizing the distribution of
 a specified variable ( `x_value` ) on the x-axis, differentiated by another
 variable ( `fill_value` ). The data for the plot are derived from the provided
 `trees` data frame.


#### Keyword

data


#### Seealso

[`ggplot2::geom_histogram`](#ggplot2::geomhistogram) , [`ggplot2::ylab`](#ggplot2::ylab) ,
 [`ggplot2::scale_fill_brewer`](#ggplot2::scalefillbrewer) , [`ggplot2::coord_cartesian`](#ggplot2::coordcartesian)


#### Value

A ggplot object representing the stacked histogram.


#### Examples

```{r}
#| eval: false
# Create a stacked histogram for variable "Z," differentiated by "area"
trees <- lfa_get_detections()
lfa_create_stacked_histogram(trees, "Z", "area")
```


#### Usage

```{r}
#| eval: false
lfa_create_stacked_histogram(
  trees,
  x_value,
  fill_value,
  bin = 30,
  ylab = "Frequency",
  xlim = c(0, 100),
  ylim = NULL
)
```



### `lfa_create_tile_location_objects`

Create tile location objects


#### Author

Jakob Danel


#### Description

This function traverses a directory structure to find LAZ files and creates
 tile location objects for each file. The function looks into the the `data` 
 directory of the repository/working directory. It then creates `tile_location` 
 objects based on the folder structure. The folder structure should not be
 touched by hand, but created by `lfa_init_data_structure()` which builds the
 structure based on a shape file.


#### Seealso

[`tile_location`](#tilelocation)


#### Value

A vector containing tile location objects.


#### Examples

```{r}
#| eval: false
lfa_create_tile_location_objects()

lfa_create_tile_location_objects()
```


#### Usage

```{r}
#| eval: false
lfa_create_tile_location_objects()
```



### `lfa_detection`

Perform tree detection on a lidar catalog and optionally save the results to a file.


#### Arguments

Argument      |Description
------------- |----------------
`catalog`     |     A lidar catalog containing point cloud data. If set to NULL, the function attempts to read the catalog from the specified tile location.
`tile_location`     |     An object specifying the location of the lidar tile. If catalog is NULL, the function attempts to read the catalog from this tile location.
`write_to_file`     |     A logical value indicating whether to save the detected tree information to a file. Default is TRUE.


#### Description

This function utilizes lidar data to detect trees within a specified catalog. The detected tree information can be optionally saved to a file in the GeoPackage format. The function uses parallel processing to enhance efficiency.


#### Value

A sf style data frame containing information about the detected trees.


#### Examples

```{r}
#| eval: false
# Perform tree detection on a catalog and save the results to a file
lfa_detection(catalog = my_catalog, tile_location = my_tile_location, write_to_file = TRUE)
```


#### Usage

```{r}
#| eval: false
lfa_detection(catalog, tile_location, write_to_file = TRUE)
```



### `lfa_download_areas`

Download areas based on spatial features


#### Arguments

Argument      |Description
------------- |----------------
`sf_areas`     |     Spatial features representing areas to be downloaded. It must include columns like "species" "name" See details for more information.


#### Author

Jakob Danel


#### Description

This function initiates the data structure and downloads areas based on spatial features.


#### Details

The input data frame, `sf_areas` , must have the following columns:
  

*  "species": The species associated with the area. 

*  "name": The name of the area. 
 
 The function uses the `lfa_init_data_structure` function to set up the data structure
 and then iterates through the rows of `sf_areas` to download each specified area.


#### Value

None


#### Examples

```{r}
#| eval: false
lfa_download_areas(sf_areas)


# Example spatial features data frame
sf_areas <- data.frame(
species = c("SpeciesA", "SpeciesB"),
name = c("Area1", "Area2"),
# Must include also other attributes specialized to sf objects
# such as geometry, for processing of the download
)

lfa_download_areas(sf_areas)
```


#### Usage

```{r}
#| eval: false
lfa_download_areas(sf_areas)
```



### `lfa_download`

Download an las file from the state NRW from a specific location


#### Arguments

Argument      |Description
------------- |----------------
`species`     |     The species of the tree which is observed at this location
`name`     |     The name of the area that is observed
`location`     |     An sf object, which holds the location information for the area where the tile should be downloaded from.


#### Description

It will download the file and save it to data/ list(list("html"), list(list("<species>"))) / list(list("html"), list(list("<name>"))) with the name of the tile


#### Value

The LASCatalog object of the downloaded file


#### Usage

```{r}
#| eval: false
lfa_download(species, name, location)
```



### `lfa_find_n_nearest_trees`

Find n Nearest Trees


#### Arguments

Argument      |Description
------------- |----------------
`trees`     |     A sf object containing tree coordinates.
`n`     |     The number of nearest trees to find for each tree (default is 100).


#### Description

This function calculates the distances to the n nearest trees for each tree in the input dataset.


#### Value

A data frame with additional columns representing the distances to the n nearest trees.


#### Examples

```{r}
#| eval: false
# Load tree data using lfa_get_detections() (not provided)
tree_data <- lfa_get_detections()

# Filter tree data for a specific species and area
tree_data = tree_data[tree_data$specie == "pine" & tree_data$area == "greffen", ]

# Find the 100 nearest trees for each tree in the filtered dataset
tree_data <- lfa_find_n_nearest_trees(tree_data)
```


#### Usage

```{r}
#| eval: false
lfa_find_n_nearest_trees(trees, n = 100)
```



### `lfa_generate_result_table_tests`

Generate Result Table for Tests


#### Arguments

Argument      |Description
------------- |----------------
`table`     |     A data frame representing the result table.


#### Description

This function generates a result table for tests using the knitr::kable function.


#### Details

This function uses the knitr::kable function to create a formatted table, making it suitable for HTML output.
 The input table is expected to be a data frame with test results, and the resulting table will have capitalized
 row and column names with lines between columns and rows.


#### Value

A formatted table suitable for HTML output with lines between columns and rows.


#### Examples

```{r}
#| eval: false
# Generate a result table for tests
result_table <- data.frame(
Test1 = c(0.05, 0.10, 0.03),
Test2 = c(0.02, 0.08, 0.01),
Test3 = c(0.08, 0.12, 0.05)
)
formatted_table <- lfa_generate_result_table_tests(result_table)
print(formatted_table)
```


#### Usage

```{r}
#| eval: false
lfa_generate_result_table_tests(table, caption = "Table Caption")
```



### `lfa_get_all_areas`

Retrieve a data frame containing all species and corresponding areas.


#### Description

This function scans the "data" directory within the current working directory to
 obtain a list of species. It then iterates through each species to retrieve the list
 of areas associated with that species. The resulting data frame contains two columns:
 "specie" representing the species and "area" representing the corresponding area.


#### Keyword

data


#### Seealso

[`list.dirs`](#list.dirs)


#### Value

A data frame with columns "specie" and "area" containing information about
 all species and their associated areas.


#### Examples

```{r}
#| eval: false
# Retrieve a data frame with information about all species and areas
all_areas_df <- lfa_get_all_areas()
```


#### Usage

```{r}
#| eval: false
lfa_get_all_areas()
```



### `lfa_get_detection_area`

Get Detection for an area


#### Arguments

Argument      |Description
------------- |----------------
`species`     |     A character string specifying the target species.
`name`     |     A character string specifying the name of the tile.


#### Description

Retrieves the tree detection information for a specified species and tile.


#### Details

This function reads tree detection data from geopackage files within the specified tile location for a given species. It then combines the data into a single SF data frame and returns it. The function assumes that the tree detection files follow a naming convention with the pattern "_detection.gpkg".


#### Keyword

spatial


#### References

This function is part of the LiDAR Forest Analysis (LFA) package.


#### Seealso

[`get_tile_dir`](#gettiledir)


#### Value

A Simple Features (SF) data frame containing tree detection information for the specified species and tile.


#### Examples

```{r}
#| eval: false
# Retrieve tree detection data for species "example_species" in tile "example_tile"
trees_data <- lfa_get_detection_tile_location("example_species", "example_tile")

# Example usage:
trees_data <- lfa_get_detection_tile_location("example_species", "example_tile")

# No trees found scenario:
empty_data <- lfa_get_detection_tile_location("nonexistent_species", "nonexistent_tile")
# The result will be an empty data frame if no trees are found for the specified species and tile.

# Error handling:
# In case of invalid inputs, the function may throw errors. Ensure correct species and tile names are provided.
```


#### Usage

```{r}
#| eval: false
lfa_get_detection_area(species, name)
```



### `lfa_get_detections_species`

Retrieve detections for a specific species.


#### Arguments

Argument      |Description
------------- |----------------
`species`     |     A character string specifying the target species.


#### Description

This function retrieves detection data for a given species from multiple areas.


#### Details

The function looks for detection data in the "data" directory for the specified species.
 It then iterates through each subdirectory (representing different areas) and consolidates the
 detection data into a single data frame.


#### Value

A data frame containing detection information for the specified species in different areas.


#### Examples

```{r}
#| eval: false
# Example usage:
detections_data <- lfa_get_detections_species("example_species")
```


#### Usage

```{r}
#| eval: false
lfa_get_detections_species(species)
```



### `lfa_get_detections`

Retrieve aggregated detection data for multiple species.


#### Concept

data retrieval functions


#### Description

This function obtains aggregated detection data for multiple species by iterating
 through the list of species obtained from [`lfa_get_species`](#lfagetspecies) . For each
 species, it calls [`lfa_get_detections_species`](#lfagetdetectionsspecies) to retrieve the
 corresponding detection data and aggregates the results into a single data frame.
 The resulting data frame includes columns for the species, tree detection data,
 and the area in which the detections occurred.


#### Keyword

aggregation


#### Seealso

[`lfa_get_species`](#lfagetspecies) , [`lfa_get_detections_species`](#lfagetdetectionsspecies) 
 
 Other data retrieval functions:
 [`lfa_get_species`](#lfagetspecies)


#### Value

A data frame containing aggregated detection data for multiple species.


#### Examples

```{r}
#| eval: false
lfa_get_detections()

# Retrieve aggregated detection data for multiple species
detections_data <- lfa_get_detections()
```


#### Usage

```{r}
#| eval: false
lfa_get_detections()
```



### `lfa_get_flag_path`

Get the path to a flag file indicating the completion of a specific process.


#### Arguments

Argument      |Description
------------- |----------------
`flag_name`     |     A character string specifying the name of the flag file. It should be a descriptive and unique identifier for the process being flagged.


#### Description

This function constructs and returns the path to a hidden flag file, which serves as an indicator that a particular processing step has been completed. The flag file is created in a designated location within the working directory.


#### Value

A character string representing the absolute path to the hidden flag file.


#### Examples

```{r}
#| eval: false
# Get the flag path for a process named "data_processing"
lfa_get_flag_path("data_processing")
```


#### Usage

```{r}
#| eval: false
lfa_get_flag_path(flag_name)
```



### `lfa_get_neighbor_paths`

Get Paths to Neighbor GeoPackage Files


#### Description

This function retrieves the file paths to GeoPackage files containing neighbor information for each detection area.
 The GeoPackage files are assumed to be named "neighbours.gpkg" and organized in a directory structure under the "data" folder.


#### Value

A character vector containing file paths to GeoPackage files for each detection area's neighbors.


#### Examples

```{r}
#| eval: false
# Get paths to neighbor GeoPackage files for all areas
paths <- lfa_get_neighbor_paths()

# Print the obtained file paths
print(paths)
```


#### Usage

```{r}
#| eval: false
lfa_get_neighbor_paths()
```



### `lfa_get_species`

Get a list of species from the data directory.


#### Concept

data retrieval functions


#### Description

This function retrieves a list of species by scanning the "data" directory
 located in the current working directory.


#### Keyword

data


#### References

This function relies on the [`list.dirs`](#list.dirs) function for directory listing.


#### Seealso

[`list.dirs`](#list.dirs) 
 
 Other data retrieval functions:
 [`lfa_get_detections`](#lfagetdetections)


#### Value

A character vector containing the names of species found in the "data" directory.


#### Examples

```{r}
#| eval: false
# Retrieve the list of species
species_list <- lfa_get_species()
```


#### Usage

```{r}
#| eval: false
lfa_get_species()
```



### `lfa_ground_correction`

Correct the point clouds for correct ground imagery


#### Arguments

Argument      |Description
------------- |----------------
`ctg`     |     An LASCatalog object. If not null, it will perform the actions on this object, if NULL inferring the catalog from the tile_location
`tile_location`     |     A tile_location type object holding the information about the location of the cataog. This is used to save the catalog after processing too.


#### Author

Jakob Danel


#### Description

This function is needed to correct the Z value of the point cloud, relative to the real
 ground height. After using this function to your catalog, the Z values can be seen as the
 real elevation about the ground. At the moment the function uses the `tin()` function from
 the `lidr` package. NOTE : The operation is inplace and can not be reverted, the old values
 of the point cloud will be deleted!


#### Value

A catalog with the corrected z values. The catalog is always stored at tile_location and
 holding only the transformed values.


#### Usage

```{r}
#| eval: false
lfa_ground_correction(ctg, tile_location)
```



### `lfa_init_data_structure`

Initialize data structure for species and areas


#### Arguments

Argument      |Description
------------- |----------------
`sf_species`     |     A data frame with information about species and associated areas.


#### Description

This function initializes the data structure for storing species and associated areas.


#### Details

The input data frame, `sf_species` , should have at least the following columns:
  

*  "species": The names of the species for which the data structure needs to be initialized. 

*  "name": The names of the associated areas. 
 
 The function creates directories based on the species and area information provided in
 the `sf_species` data frame. It checks whether the directories already exist and creates
 them if they don't.


#### Value

None


#### Examples

```{r}
#| eval: false
# Example species data frame
sf_species <- data.frame(
species = c("SpeciesA", "SpeciesB"),
name = c("Area1", "Area2"),
# Other necessary columns
)

lfa_init_data_structure(sf_species)

# Example species data frame
sf_species <- data.frame(
species = c("SpeciesA", "SpeciesB"),
name = c("Area1", "Area2"),
# Other necessary columns
)

lfa_init_data_structure(sf_species)
```


#### Usage

```{r}
#| eval: false
lfa_init_data_structure(sf_species)
```



### `lfa_init`

Initialize LFA (LiDAR forest analysis) data processing


#### Arguments

Argument      |Description
------------- |----------------
`sf_file`     |     A character string specifying the path to the shapefile containing spatial features of research areas.


#### Description

This function initializes the LFA data processing by reading a shapefile containing
 spatial features of research areas, downloading the specified areas, and creating
 tile location objects for each area.


#### Details

This function reads a shapefile ( `sf_file` ) using the `sf` package, which should
 contain information about research areas. It then calls the `lfa_download_areas` 
 function to download the specified areas and `lfa_create_tile_location_objects` 
 to create tile location objects based on Lidar data files in those areas. The
 shapefile MUST follow the following requirements:
  

*  Each geometry must be a single object of type polygon 

*  Each entry must have the following attributes:  

*  species: A string describing the tree species of the area. 

*  name: A string describing the location of the area.


#### Value

A vector containing tile location objects.


#### Examples

```{r}
#| eval: false
# Initialize LFA processing with the default shapefile
lfa_init()

# Initialize LFA processing with a custom shapefile
lfa_init("custom_areas.shp")

# Example usage with the default shapefile
lfa_init()

# Example usage with a custom shapefile
lfa_init("custom_areas.shp")
```


#### Usage

```{r}
#| eval: false
lfa_init(sf_file = "research_areas.shp")
```



### `lfa_intersect_areas`

Intersect Lidar Catalog with Spatial Features


#### Arguments

Argument      |Description
------------- |----------------
`ctg`     |     A LAScatalog object representing the Lidar data to be processed.
`tile_location`     |     A tile location object representing the specific area of interest.
`areas_sf`     |     Spatial features defining areas.


#### Description

This function intersects a Lidar catalog with a specific area defined by spatial features.


#### Details

The function intersects the Lidar catalog specified by `ctg` with a specific area defined by
 the `tile_location` object and `areas_sf` . It removes points outside the specified area and
 returns a modified LAScatalog object.
 
 The specified area is identified based on the `species` and `name` attributes in the
 `tile_location` object. If a matching area is not found in `areas_sf` , the function
 stops with an error.
 
 The function then transforms the spatial reference of the identified area to match that of
 the Lidar catalog using `sf::st_transform` .
 
 The processing is applied to each chunk in the catalog using the `identify_area` function,
 which merges spatial information and filters out points that are not classified as inside
 the identified area. After processing, the function writes the modified LAS files back to
 the original file locations, removing points outside the specified area.
 
 If an error occurs during the processing of a chunk, a warning is issued, and the function
 continues processing the next chunks. If no points are found after filtering, a warning is
 issued, and NULL is returned.


#### Seealso

Other functions in the Lidar forest analysis (LFA) package.


#### Value

A modified LAScatalog object with points outside the specified area removed.


#### Examples

```{r}
#| eval: false
# Example usage
lfa_intersect_areas(ctg, tile_location, areas_sf)

# Example usage
lfa_intersect_areas(ctg, tile_location, areas_sf)
```


#### Usage

```{r}
#| eval: false
lfa_intersect_areas(ctg, tile_location, areas_sf)
```



### `lfa_jsd_from_vec`

Compute Jensen-Shannon Divergence from Vectors


#### Arguments

Argument      |Description
------------- |----------------
`x`     |     A numeric vector.
`y`     |     A numeric vector.


#### Description

This function calculates the Jensen-Shannon Divergence (JSD) between two vectors.


#### Value

Jensen-Shannon Divergence between the density distributions of x and y.


#### Examples

```{r}
#| eval: false
x <- rnorm(100)
y <- rnorm(100, mean = 2)
lfa_jsd_from_vec(x, y)
```


#### Usage

```{r}
#| eval: false
lfa_jsd_from_vec(x, y)
```



### `lfa_jsd`

Jensen-Shannon Divergence Calculation


#### Arguments

Argument      |Description
------------- |----------------
`p`     |     A numeric vector representing the probability distribution P.
`q`     |     A numeric vector representing the probability distribution Q.
`epsilon`     |     A small positive constant added to both P and Q to avoid logarithm of zero. Default is 1e-10.


#### Description

This function calculates the Jensen-Shannon Divergence (JSD) between two probability distributions P and Q.


#### Details

The JSD is computed using the Kullback-Leibler Divergence (KLD) as follows:
 `sum((p * log((p + epsilon) / (m + epsilon)) + q * log((q + epsilon) / (m + epsilon))) / 2)` 
 where `m = (p + q) / 2` .


#### Seealso

[`kld`](#kld) , [`sum`](#sum) , [`log`](#log)


#### Value

A numeric value representing the Jensen-Shannon Divergence between P and Q.


#### Examples

```{r}
#| eval: false
# Calculate JSD between two probability distributions
p_distribution <- c(0.2, 0.3, 0.5)
q_distribution <- c(0.1, 0, 0.9)
jsd_result <- jsd(p_distribution, q_distribution)
print(jsd_result)
```


#### Usage

```{r}
#| eval: false
lfa_jsd(p, q, epsilon = 1e-10)
```



### `lfa_kld_from_vec`

Compute Kullback-Leibler Divergence from Vectors


#### Arguments

Argument      |Description
------------- |----------------
`x`     |     A numeric vector.
`y`     |     A numeric vector.


#### Description

This function calculates the Kullback-Leibler Divergence (KLD) between two vectors.


#### Value

Kullback-Leibler Divergence between the density distributions of x and y.


#### Examples

```{r}
#| eval: false
x <- rnorm(100)
y <- rnorm(100, mean = 2)
lfa_kld_from_vec(x, y)
```


#### Usage

```{r}
#| eval: false
lfa_kld_from_vec(x, y)
```



### `lfa_kld`

Kullback-Leibler Divergence Calculation


#### Arguments

Argument      |Description
------------- |----------------
`p`     |     A numeric vector representing the probability distribution P.
`q`     |     A numeric vector representing the probability distribution Q.
`epsilon`     |     A small positive constant added to both P and Q to avoid logarithm of zero. Default is 1e-10.


#### Description

This function calculates the Kullback-Leibler Divergence (KLD) between two probability distributions P and Q.


#### Details

The KLD is computed using the formula:
 `sum(p * log((p + epsilon) / (q + epsilon)))` 
 This avoids issues when the denominator (Q) contains zero probabilities.


#### Seealso

[`sum`](#sum) , [`log`](#log)


#### Value

A numeric value representing the Kullback-Leibler Divergence between P and Q.


#### Examples

```{r}
#| eval: false
# Calculate KLD between two probability distributions
p_distribution <- c(0.2, 0.3, 0.5)
q_distribution <- c(0.1, 0, 0.9)
kld_result <- kld(p_distribution, q_distribution)
print(kld_result)
```


#### Usage

```{r}
#| eval: false
lfa_kld(p, q, epsilon = 1e-10)
```



### `lfa_ks_test`

Kolmogorov-Smirnov Test Wrapper Function


#### Arguments

Argument      |Description
------------- |----------------
`x`     |     A numeric vector representing the first sample.
`y`     |     A numeric vector representing the second sample.
`output_variable`     |     A character string specifying the output variable to extract from the ks.test result. Default is "p.value". Other possible values include "statistic" and "alternative".
`...`     |     Additional arguments to be passed to the ks.test function.


#### Description

This function serves as a wrapper for the Kolmogorov-Smirnov (KS) test between two samples.


#### Details

The function uses the ks.test function to perform a two-sample KS test and returns the specified output variable.
 The default output variable is the p-value. Other possible output variables include "statistic" and "alternative".


#### Seealso

[`ks.test`](#ks.test)


#### Value

A numeric value representing the specified output variable from the KS test result.


#### Examples

```{r}
#| eval: false
# Perform KS test and extract the p-value
result <- lfa_ks_test(sample1, sample2)
print(result)

# Perform KS test and extract the test statistic
result_statistic <- lfa_ks_test(sample1, sample2, output_variable = "statistic")
print(result_statistic)
```


#### Usage

```{r}
#| eval: false
lfa_ks_test(x, y, output_variable = "p.value", ...)
```



### `lfa_load_ctg_if_not_present`

Loading the catalog if it is not present


#### Arguments

Argument      |Description
------------- |----------------
`ctg`     |     Catalog object. Can be NULL
`tile_location`     |     The location to look for the catalog tiles, if their are not present


#### Description

This function checks if the catalog is `NULL` . If it is it will load the
 catalog from the `tile_location`


#### Value

The provided ctg object if not null, else the catalog for the tiles
 of the tile_location.


#### Usage

```{r}
#| eval: false
lfa_load_ctg_if_not_present(ctg, tile_location)
```



### `lfa_map_tile_locations`

Map Function Over Tile Locations


#### Arguments

Argument      |Description
------------- |----------------
`tile_locations`     |     A list of tile location objects.
`map_function`     |     The mapping function to be applied to each tile location.
`...`     |     Additional arguments to be passed to the mapping function.


#### Description

This function applies a specified mapping function to each tile location in a list.


#### Details

This function iterates over each tile location in the provided list ( `tile_locations` )
 and applies the specified mapping function ( `map_function` ) to each tile location.
 The mapping function should accept a tile location object as its first argument, and
 additional arguments can be passed using the ellipsis ( `...` ) syntax.
 
 This function is useful for performing operations on multiple tile locations concurrently,
 such as loading Lidar data, processing areas, or other tasks that involve tile locations.


#### Seealso

The mapping function provided should be compatible with the structure and requirements
 of the tile locations and the specific task being performed.


#### Value

None


#### Examples

```{r}
#| eval: false
# Example usage
lfa_map_tile_locations(tile_locations, my_mapping_function, param1 = "value")

# Example usage
lfa_map_tile_locations(tile_locations, my_mapping_function, param1 = "value")
```


#### Usage

```{r}
#| eval: false
lfa_map_tile_locations(tile_locations, map_function, check_flag = NULL, ...)
```



### `lfa_merge_and_save`

Merge and Save Text Files in a Directory


#### Arguments

Argument      |Description
------------- |----------------
`input_directory`     |     The path to the input directory containing text files.
`output_name`     |     The name for the output file where the merged content will be saved.


#### Description

This function takes an input directory and an output name as arguments.
 It merges the textual content of all files in the specified directory into
 a single string, with each file's content separated by a newline character.
 The merged content is then saved into a file named after the output name
 in the same directory. After the merging is complete, all input files are
 deleted.


#### Details

This function reads the content of each text file in the specified input directory
 and concatenates them into a single string. Each file's content is separated by a newline
 character. The merged content is then saved into a file named after the output name
 in the same directory. Finally, all input files are deleted from the directory.


#### Seealso

[`readLines`](#readlines) , [`writeLines`](#writelines) , [`file.remove`](#file.remove)


#### Value

This function does not explicitly return any value. It prints a message
 indicating the successful completion of the merging and saving process.


#### Examples

```{r}
#| eval: false
# Merge text files in the "data_files" directory and save the result in "merged_output"
lfa_merge_and_save("data_files", "merged_output")

# Merge text files in the "data_files" directory and save the result in "merged_output"
lfa_merge_and_save("data_files", "merged_output")
```


#### Usage

```{r}
#| eval: false
lfa_merge_and_save(input_directory, output_name)
```



### `lfa_random_forest`

Random Forest Classifier with Leave-One-Out Cross-Validation


#### Arguments

Argument      |Description
------------- |----------------
`tree_data`     |     A data frame containing the tree data, including the response variable ("specie") and predictor variables.
`excluded_input_columns`     |     A character vector specifying columns to be excluded from predictor variables.
`response_variable`     |     The response variable to be predicted (default is "specie").
`seed`     |     An integer to set the seed for reproducibility (default is 123).
`...`     |     Additional parameters to be passed to the randomForest function.


#### Description

This function performs a random forest classification using leave-one-out cross-validation for each area in the input tree data.
 It returns a list containing various results, including predicted species, confusion matrix, accuracy, and the formula used for modeling.


#### Value

A list containing the following elements:
  

*   `predicted_species_absolute` : A data frame with observed and predicted species for each area. 

*   `predicted_species_relative` : A data frame wit the relative precictions per speices and areas, normalized by the total predictions in each area. 

*   `confusion_matrix` : A confusion matrix showing the counts of predicted vs. observed species. 

*   `accuracy` : The accuracy of the model, calculated as the sum of diagonal elements in the confusion matrix divided by the total count. 

*   `formula` : The formula used for modeling.


#### Examples

```{r}
#| eval: false
# Assuming tree_data is defined
results <- lfa_random_forest(tree_data, excluded_input_columns = c("column1", "column2"))

# Print the list of results
print(results)
```


#### Usage

```{r}
#| eval: false
lfa_random_forest(
  tree_data,
  excluded_input_columns,
  response_variable = "specie",
  ntree = 100,
  seed = 123,
  ...
)
```



### `lfa_rd_to_qmd`

Convert Rd File to Markdown


#### Arguments

Argument      |Description
------------- |----------------
`rdfile`     |     The path to the Rd file or a parsed Rd object.
`outfile`     |     The path to the output Markdown file (including the file extension).
`append`     |     Logical, indicating whether to append to an existing file (default is FALSE).


#### Description

IMPORTANT NOTE: 
 This function is nearly identical to the `Rd2md::Rd2markdown` function from the `Rd2md` 
 package. We needed to implement our own version of it because of various reasons:
  

*  The algorithm uses hardcoded header sizes (h1 and h2 in original) which is not feasible for our use-case of the markdown. 

*  We needed to add some Quarto Markdown specifics, e.g. to make sure that the examples will not be runned. 

*  We want to exclude certain tags from our implementation.


#### Details

For that reason we copied the method and made changes as needed and also added this custom documentation.
 
 This function converts an Rd (R documentation) file to Markdown format (.md) and
 saves the converted file at the specified location. The function allows appending
 to an existing file or creating a new one. The resulting Markdown file includes
 sections for the function's name, title, and additional content such as examples,
 usage, arguments, and other sections present in the Rd file.
 
 The function performs the following steps:
  

*  Parses the Rd file using the Rd2md package. 

*  Creates a Markdown file with sections for the function's name, title, and additional content. 

*  Appends the content to an existing file if `append` is set to TRUE. 

*  Saves the resulting Markdown file at the specified location.


#### Seealso

[`Rd2md::parseRd`](#rd2md::parserd)


#### Value

This function does not explicitly return any value. It saves the converted Markdown file
 at the specified location as described in the details section.


#### Examples

```{r}
#| eval: false
# Convert Rd file to Markdown and save it
lfa_rd_to_md("path/to/your/file.Rd", "path/to/your/output/file.md")

# Convert Rd file to Markdown and append to an existing file
lfa_rd_to_md("path/to/your/file.Rd", "path/to/existing/output/file.md", append = TRUE)
```


#### Usage

```{r}
#| eval: false
lfa_rd_to_qmd(rdfile, outfile, append = FALSE)
```



### `lfa_rd_to_results`

Convert Rd Files to Markdown and Merge Results


#### Description

This function converts all Rd (R documentation) files in the "man" directory
 to Markdown format (.qmd) and saves the converted files in the "results/appendix/package-docs" directory.
 It then merges the converted Markdown files into a single string and saves
 the merged content into a file named "docs.qmd" in the "results/appendix/package-docs" directory.


#### Details

The function performs the following steps:
  

*  Removes any existing "docs.qmd" file in the "results/appendix/package-docs" directory. 

*  Finds all Rd files in the "man" directory. 

*  Converts each Rd file to Markdown format (.qmd) using the `lfa_rd_to_qmd` function. 

*  Saves the converted Markdown files in the "results/appendix/package-docs" directory. 

*  Merges the content of all converted Markdown files into a single string. 

*  Saves the merged content into a file named "docs.qmd" in the "results/appendix/package-docs" directory.


#### Seealso

[`lfa_rd_to_qmd`](#lfardtoqmd) , [`lfa_merge_and_save`](#lfamergeandsave)


#### Value

This function does not explicitly return any value. It performs the conversion,
 merging, and saving operations as described in the details section.


#### Examples

```{r}
#| eval: false
# Convert Rd files to Markdown and merge the results
lfa_rd_to_results()
```


#### Usage

```{r}
#| eval: false
lfa_rd_to_results()
```



### `lfa_read_area_as_catalog`

Read LiDAR data from a specified species and location as a catalog.


#### Arguments

Argument      |Description
------------- |----------------
`specie`     |     A character string specifying the species of interest.
`location_name`     |     A character string specifying the name of the location.


#### Description

This function constructs the file path based on the specified `specie` and `location_name` ,
 lists the directories at that path, and reads the LiDAR data into a `lidR::LAScatalog` .


#### Value

A `lidR::LAScatalog` object containing the LiDAR data from the specified location and species.


#### Examples

```{r}
#| eval: false
lfa_read_area_as_catalog("beech", "location1")
```


#### Usage

```{r}
#| eval: false
lfa_read_area_as_catalog(specie, location_name)
```



### `lfa_run_test_asymmetric`

Asymmetric Pairwise Test for Categories


#### Arguments

Argument      |Description
------------- |----------------
`data`     |     A data frame containing the relevant columns.
`data_column`     |     A character string specifying the column containing the numerical data.
`category_column`     |     A character string specifying the column containing the categorical variable.
`test_function`     |     A function used to perform the pairwise test between two sets of data. It should accept two vectors of numeric data and additional parameters specified by `...` . The function should return a numeric value representing the test result.
`...`     |     Additional parameters to be passed to the `test_function` .


#### Description

This function performs an asymmetric pairwise test for categories using a user-defined `test_function` .


#### Details

The function calculates the test results for each unique combination of categories using the specified
 `test_function` . The resulting table is asymmetric, containing the test results for comparisons
 from the rows to the columns.


#### Seealso

[`outer`](#outer) , [`Vectorize`](#vectorize)


#### Value

A data frame representing the results of the asymmetric pairwise tests between categories.


#### Examples

```{r}
#| eval: false
# Define a custom test function
custom_test_function <- function(x, y) {
# Your test logic here
# Return a numeric result
return(mean(x) - mean(y))
}

# Perform an asymmetric pairwise test
result <- lfa_run_test_asymmetric(your_data, "numeric_column", "category_column", custom_test_function)
```


#### Usage

```{r}
#| eval: false
lfa_run_test_asymmetric(data, data_column, category_column, test_function, ...)
```



### `lfa_run_test_symmetric`

Symmetric Pairwise Test for Categories


#### Arguments

Argument      |Description
------------- |----------------
`data`     |     A data frame containing the relevant columns.
`data_column`     |     A character string specifying the column containing the numerical data.
`category_column`     |     A character string specifying the column containing the categorical variable.
`test_function`     |     A function used to perform the pairwise test between two sets of data. It should accept two vectors of numeric data and additional parameters specified by `...` . The function should return a numeric value representing the test result.
`...`     |     Additional parameters to be passed to the `test_function` .


#### Description

This function performs a symmetric pairwise test for categories using a user-defined `test_function` .


#### Details

The function calculates the test results for each unique combination of categories using the specified
 `test_function` . The resulting table is symmetric, containing the test results for comparisons
 from the rows to the columns. The upper triangle of the matrix is filled with `NA` to avoid duplicate results.


#### Seealso

[`outer`](#outer) , [`Vectorize`](#vectorize)


#### Value

A data frame representing the results of the symmetric pairwise tests between categories.


#### Examples

```{r}
#| eval: false
# Define a custom test function
custom_test_function <- function(x, y) {
# Your test logic here
# Return a numeric result
return(mean(x) - mean(y))
}

# Perform a symmetric pairwise test
result <- lfa_run_test_symmetric(your_data, "numeric_column", "category_column", custom_test_function)
```


#### Usage

```{r}
#| eval: false
lfa_run_test_symmetric(data, data_column, category_column, test_function, ...)
```



### `lfa_save_all_neighbours`

Save Neighbors for All Areas


#### Arguments

Argument      |Description
------------- |----------------
`n`     |     The number of nearest trees to find for each tree (default is 100).


#### Description

This function iterates through all detection areas, finds the n nearest trees for each tree,
 and saves the result to a GeoPackage file for each area.


#### Examples

```{r}
#| eval: false
# Save neighbors for all areas with default value (n=100)
lfa_save_all_neighbours()

# Save neighbors for all areas with a specific value of n (e.g., n=50)
lfa_save_all_neighbours(n = 50)
```


#### Usage

```{r}
#| eval: false
lfa_save_all_neighbours(n = 100)
```



### `lfa_segmentation`

Segment the elements of an point cloud by trees


#### Arguments

Argument      |Description
------------- |----------------
`ctg`     |     An LASCatalog object. If not null, it will perform the actions on this object, if NULL inferring the catalog from the tile_location
`tile_location`     |     A tile_location type object holding the information about the location of the catalog. This is used to save the catalog after processing too.


#### Author

Jakob Danel


#### Description

This function will try to to divide the hole point cloud into unique trees.
 Therefore it is assigning for each chunk of the catalog  a `treeID` for each
 point. Therefore the algorithm uses the `li2012` implementation with the
 following parameters: `li2012(dt1 = 2, dt2 = 3, R = 2, Zu = 10, hmin = 5, speed_up = 12)` 
 NOTE : The operation is in place and can not be reverted, the old values
 of the point cloud will be deleted!


#### Value

A catalog where each chunk has additional `treeID` values indicating the belonging tree.


#### Usage

```{r}
#| eval: false
lfa_segmentation(ctg, tile_location)
```



### `lfa_set_flag`

Set a flag to indicate the completion of a specific process.


#### Arguments

Argument      |Description
------------- |----------------
`flag_name`     |     A character string specifying the name of the flag file. It should be a descriptive and unique identifier for the process being flagged.


#### Description

This function creates a hidden flag file at a specified location within the working directory to indicate that a particular processing step has been completed. If the flag file already exists, a warning is issued.


#### Value

This function does not have a formal return value.


#### Examples

```{r}
#| eval: false
# Set the flag for a process named "data_processing"
lfa_set_flag("data_processing")
```


#### Usage

```{r}
#| eval: false
lfa_set_flag(flag_name)
```


